const TelegramBot = require('node-telegram-bot-api');
const { exec } = require('child_process');
const os = require('os');

const token = '7534473375:AAFqGHiHPT0HyzmAkQ7TxoYTFL3KVU0SdEM';
const bot = new TelegramBot(token, { polling: true });
const adminId = 7371969470;

// H√†m l·∫•y th√¥ng s·ªë CPU v√† RAM
const getSystemStats = () => {
    const totalMemory = os.totalmem();
    const freeMemory = os.freemem();
    const usedMemory = totalMemory - freeMemory;
    const memoryUsagePercent = ((usedMemory / totalMemory) * 100).toFixed(2);
    const cpuUsagePercent = (os.cpus().reduce((acc, cpu) => {
        const total = Object.values(cpu.times).reduce((a, b) => a + b, 0);
        const idle = cpu.times.idle;
        return acc + (100 - (idle / total) * 100);
    }, 0) / os.cpus().length).toFixed(2);
    return { memoryUsagePercent, cpuUsagePercent, totalMemory: (totalMemory / 1024 / 1024 / 1024).toFixed(0), freeMemory: (freeMemory / 1024 / 1024 / 1024).toFixed(0) };
};

// G·ª≠i th√¥ng s·ªë CPU v√† RAM m·ªói 14 gi√¢y
setInterval(() => {
    const stats = getSystemStats();
    const cpuFreePercent = (100 - parseFloat(stats.cpuUsagePercent)).toFixed(2);
    bot.sendMessage(adminId, `
Th√¥ng s·ªë ƒë√£ s·ª≠ d·ª•ng: üöÄ 
- CPU ƒë√£ s·ª≠ d·ª•ng: ${stats.cpuUsagePercent}%
- RAM ƒë√£ s·ª≠ d·ª•ng: ${stats.memoryUsagePercent}%

Th√¥ng s·ªë c√≤n tr·ªëng: ‚ù§Ô∏è
- CPU c√≤n tr·ªëng: ${cpuFreePercent}%
- RAM c√≤n tr·ªëng: ${stats.freeMemory}GB
- T·ªïng RAM: ${stats.totalMemory}GB
    `);
}, 14000);

// X·ª≠ l√Ω l·ªánh t·ª´ admin
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    // Ch·ªâ admin m·ªõi ƒë∆∞·ª£c th·ª±c hi·ªán l·ªánh
    if (chatId !== adminId) {
        return bot.sendMessage(chatId, 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.');
    }

    // Ki·ªÉm tra xem l·ªánh c√≥ b·∫Øt ƒë·∫ßu b·∫±ng "exe" kh√¥ng
    if (!text.startsWith('exe ')) {
        return bot.sendMessage(chatId, 'L·ªánh kh√¥ng h·ª£p l·ªá. Vui l√≤ng b·∫Øt ƒë·∫ßu l·ªánh v·ªõi "exe".');
    }

    // L·∫•y l·ªánh th·ª±c t·∫ø (b·ªè qua "exe ")
    const command = text.slice(4).trim();

    // N·∫øu l·ªánh tr·ªëng sau khi b·ªè "exe"
    if (!command) {
        return bot.sendMessage(chatId, 'L·ªánh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng. V√≠ d·ª•: "exe ls"');
    }

    console.log(`[DEBUG] L·ªánh ƒë∆∞·ª£c th·ª±c thi: ${command}`);

    // G·ª≠i th√¥ng b√°o ƒëang th·ª±c thi l·ªánh
    bot.sendMessage(chatId, `üöÄ ƒêang th·ª±c thi l·ªánh: \`${command}\``);

    // S·ª≠ d·ª•ng exec ƒë·ªÉ th·ª±c thi l·ªánh
    const child = exec(command);

    // X·ª≠ l√Ω stdout v√† stderr
    const handleOutput = (data, type) => {
        const output = data.toString();
        console.log(`[DEBUG] ${type}: ${output}`); // Debug ra console
        bot.sendMessage(chatId, JSON.stringify({ type, output }, null, 2)); // G·ª≠i v·ªÅ Telegram d∆∞·ªõi d·∫°ng JSON
    };

    child.stdout.on('data', (data) => handleOutput(data, 'stdout'));
    child.stderr.on('data', (data) => handleOutput(data, 'stderr'));

    // X·ª≠ l√Ω khi l·ªánh k·∫øt th√∫c
    child.on('close', (code) => {
        console.log(`[DEBUG] L·ªánh ƒë√£ k·∫øt th√∫c v·ªõi m√£ tho√°t: ${code}`);
        bot.sendMessage(chatId, JSON.stringify({ exitCode: code }, null, 2)); // G·ª≠i m√£ tho√°t v·ªÅ Telegram d∆∞·ªõi d·∫°ng JSON
    });
});
